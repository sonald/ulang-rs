use crate::lexer::*;
use crate::parser::ast;

grammar<'source>;

extern {
    type Location = usize;
    type Error = ();

    enum UlangToken<'source> {
        Pub => UlangToken::Pub,
        Priv => UlangToken::Priv,
        Func => UlangToken::Func,
        Class => UlangToken::Class,
        For => UlangToken::For,
        In => UlangToken::In,
        Return => UlangToken::Return,
        Match => UlangToken::Match,
        Let => UlangToken::Let,
        Break => UlangToken::Break,
        Continue => UlangToken::Continue,
        Loop => UlangToken::Loop,
        If => UlangToken::If,
        Else => UlangToken::Else,

        LBRACE => UlangToken::LBRACE,
        RBRACE => UlangToken::RBRACE,
        LPAREN => UlangToken::LPAREN,
        RPAREN => UlangToken::RPAREN,
        LBRACKET => UlangToken::LBRACKET,
        RBRACKET => UlangToken::RBRACKET,
        Colon => UlangToken::Colon,
        Comma => UlangToken::Comma,
        Dot => UlangToken::Dot,
        Semicolon => UlangToken::Semicolon,
        Plus => UlangToken::Plus,
        Minus => UlangToken::Minus,
        Multiply => UlangToken::Multiply,
        Divide => UlangToken::Divide,
        Assign => UlangToken::Assign,
        Not => UlangToken::Not,
        PlusAssign => UlangToken::PlusAssign,
        MinusAssign => UlangToken::MinusAssign,
        Equal => UlangToken::Equal,
        NotEqual => UlangToken::NotEqual,
        Less => UlangToken::Less,
        Greater => UlangToken::Greater,
        Underscore => UlangToken::Underscore,
        LessEqual => UlangToken::LessEqual,
        GreaterEqual => UlangToken::GreaterEqual,
        RightArrow => UlangToken::RightArrow,
        FatArrow => UlangToken::FatArrow,

        LineComment => UlangToken::LineComment(<&'source str>),
        PrimType => UlangToken::PrimType(<&'source str>),
        Ident => UlangToken::Ident(<&'source str>),
        Decimal => UlangToken::Decimal(<&'source str>),
    }
}

pub ulang = compilation_unit;

pub compilation_unit: ast::CompilationUnit = { 
    <v:term*> => ast::CompilationUnit(v),
}

term: ast::Term = {
    class => ast::Term::Class(<>),
    func => ast::Term::Func(<>),
    // LineComment,
}

class: ast::ClassDefinition = {
    Class <id:Ident> LBRACE <v:class_body> RBRACE => {
        ast::ClassDefinition {
            name: id.to_owned(),
            funcs: Some(v)
        }
    }
}

class_body: Vec<ast::FuncDefinition> = {
    func => vec![<>],
    <v:class_body> <f:func> => {
        let mut v = v;
        v.push(f);
        v
    }
}

func: ast::FuncDefinition = {
    <d:func_decl> <v:statements_block> => ast::FuncDefinition {
        name: d.0.to_owned(),
        args: d.1,
        rettype: d.2,
        statements: ast::StatementBlock(v)
    },
}

func_decl: (&'source str, Vec<ast::Symbol>, Option<String>) = {
    Pub Func <id:Ident> LPAREN <a:args_decl?> RPAREN => (id, a.unwrap_or(vec![]), None),
    Pub Func <id:Ident> LPAREN <a:args_decl?> RPAREN RightArrow <ret:type_decl> => (id, a.unwrap_or(vec![]), Some(ret)),
    Func <id:Ident> LPAREN <a:args_decl?> RPAREN => (id, a.unwrap_or(vec![]), None),
    Func <id:Ident> LPAREN <a:args_decl?> RPAREN RightArrow <ret:type_decl> => (id, a.unwrap_or(vec![]), Some(ret)),
}

args_decl: Vec<ast::Symbol> = {
    <arg:Ident> <ty:type_decl> => {
        let mut v = vec![];
        v.push(ast::Symbol {
            name: arg.to_owned(),
            ty: ty
        });
        v
    },
    <v:args_decl> Comma <arg:Ident> <ty:type_decl> => {
        let mut v = v;
        v.push(ast::Symbol {
            name: arg.to_owned(),
            ty: ty
        });
        v
    }
}

type_decl: String = {
    // array type
    <ty:PrimType> LBRACKET RBRACKET => format!("{}[]", ty),
    // (a,b,...)
    LPAREN <a:type_decl> Comma <b:type_decl> RPAREN => format!("({}, {})", a, b),
    // base type
    <ty:PrimType> => format!("{}", ty),
}

statements_block: Vec<ast::Statement> = {
    LBRACE <statement*> RBRACE,
}

statement: ast::Statement = {
    Let <id:Ident> Assign <init:initializer> Semicolon => ast::Statement::Let {
        val: id.to_owned(),
        init: Some(init),
    },
    Let LPAREN <id:Ident> Comma Ident RPAREN Assign <init:initializer> Semicolon => ast::Statement::Let {
        val: id.to_owned(),
        init: Some(init)
    },
    <lhs:primitive_expr> <op:assignment_operator> <rhs:expression> Semicolon => ast::Statement::Assignment {
        lhs, op, rhs
    },
    Loop <statements_block> => ast::Statement::Loop(ast::StatementBlock(<>)),
    If <expr:expression> <s1:statements_block> <s2:(Else <statements_block>)?> => ast::Statement::Conditional {
        predicate: expr,
        positive: ast::StatementBlock(s1),
        negative: ast::StatementBlock(s2.unwrap_or(vec![]))
    },
    For <var:Ident> In <expr:Ident> <block:statements_block> => ast::Statement::For {
        var: var.to_owned(), expr: expr.to_owned(), block: ast::StatementBlock(block)
    },
    Match <expr:expression> LBRACE <arms:match_arms> RBRACE => ast::Statement::Match {
        expr: expr, arms: ast::StatementBlock(arms)
    },
    <expression> Semicolon => ast::Statement::Expr(<>),
    Return <e:expression?> Semicolon => ast::Statement::Return(e),
    Break Semicolon? => ast::Statement::Break,
}

initializer: ast::Expression = {
    expression,
    type_construct
}

match_arms: Vec<ast::Statement> = {
    match_arm => vec![<>],
    <v:match_arms> Comma <e:match_arm> => {
        let mut v = v;
        v.push(e);
        v
    }
}

match_arm: ast::Statement = {
    <condition:match_cond> FatArrow <stat:statement> => ast::Statement::MatchArm {
        condition: condition, stat: ast::StatementBlock(vec![stat])
    },
    <condition:match_cond> FatArrow Return => ast::Statement::MatchArm {
        condition: condition, stat: ast::StatementBlock(vec![ast::Statement::Return(None)])
    },
    <condition:match_cond> FatArrow <stat:statements_block> => ast::Statement::MatchArm {
        condition: condition, stat: ast::StatementBlock(stat)
    },
}

match_cond: ast::Expression = {
    Ident => ast::Expression::SymbolExpr(<>.to_owned()),
    Decimal => ast::Expression::DecimalExpr(<>.parse::<i32>().unwrap()),
    Underscore => ast::Expression::SymbolExpr("_".to_owned()),
}

expression: ast::Expression = {
    tuple,
    expressions_block,
    binary_expr,
}

expressions_block: ast::Expression = {
    LBRACE <v:statement*> <e:expression> RBRACE => ast::Expression::Block {
        stats: v,
        expr: Box::new(e)
    }
}

binary_expr: ast::Expression = {
    unary_expr,
    // left association
    <lhs:binary_expr> <op:binary_operator> <rhs:postfix_expr> => ast::Expression::BinaryExpr {
        op: op,
        lhs: Box::new(lhs),
        rhs: Box::new(rhs)
    }
}

unary_expr: ast::Expression = {
    <op:unary_operator> <e:unary_expr> => ast::Expression::UnaryExpr {
        op: op, expr: Box::new(e)
    }, 
    postfix_expr
}

unary_operator: ast::Operator = {
    Plus => ast::Operator::Plus,
    Minus => ast::Operator::Minus, 
    Not => ast::Operator::Not,
}

binary_operator: ast::Operator = {
    multiplicative_operator, additive_operator, relational_operator
}

multiplicative_operator: ast::Operator = {
    Multiply => ast::Operator::Multiply,
    Divide => ast::Operator::Divide,
}

additive_operator: ast::Operator = {
    Plus => ast::Operator::Plus,
    Minus => ast::Operator::Minus, 
}

relational_operator: ast::Operator = {
    Equal => ast::Operator::Equal,
    NotEqual => ast::Operator::NotEqual,
    Greater => ast::Operator::Greater,
    GreaterEqual => ast::Operator::GreaterEqual,
    Less => ast::Operator::Less,
    LessEqual => ast::Operator::LessEqual,
}

assignment_operator: ast::Operator = {
    Assign => ast::Operator::Assign,
    PlusAssign => ast::Operator::PlusAssign,
    MinusAssign => ast::Operator::MinusAssign
}

// bitwiseOperator ::= '&' | '^' | '|'

postfix_expr: ast::Expression = {
    field_expr,
    <callee:postfix_expr> LPAREN <args:func_args?> RPAREN => ast::Expression::CallExpr {
        callee: Box::new(callee),
        args: ast::ExpressionList(args.unwrap_or(vec![]))
    },
    <o:postfix_expr> LBRACKET <idx:index_expr> RBRACKET => ast::Expression::IndexExpr {
        object: Box::new(o),
        index: Box::new(idx)
    },
    primitive_expr,
}

// right association
field_expr: ast::Expression = {
    <o:Ident> Dot <id:Ident> => ast::Expression::FieldExpr {
        object: Box::new(ast::Expression::SymbolExpr(o.to_owned())),
        field: Box::new(ast::Expression::SymbolExpr(id.to_owned())),

    },
    <o:Ident> Dot <f:field_expr> => ast::Expression::FieldExpr {
        object: Box::new(ast::Expression::SymbolExpr(o.to_owned())),
        field: Box::new(f),
    },
}

index_expr: ast::Expression = {
    Colon => ast::Expression::RangeExpr {
        start: None, end: None
    },
    <lhs:binary_expr> <rhs:(Colon <binary_expr?>)?> => {
        match rhs {
            Some(rhs) => ast::Expression::RangeExpr {
                start: Some(Box::new(lhs)),
                end: rhs.map(|e| Box::new(e))
            },
            None => lhs // not a range expr
        }
    },
}

primitive_expr: ast::Expression = {
    Ident => ast::Expression::SymbolExpr(<>.to_owned()),
    Decimal => ast::Expression::DecimalExpr(<>.parse::<i32>().unwrap()),
    Underscore => ast::Expression::SymbolExpr("_".to_owned()),
    // LPAREN expression RPAREN,
}

type_construct: ast::Expression = {
    <type_decl> LPAREN RPAREN => ast::Expression::TypeExpr(ast::TypeConstruct{name: <>}),
}

func_args: Vec<ast::Expression> = {
    expression => vec![<>],
    <v:func_args> Comma <e:expression> => {
        let mut v = v;
        v.push(e);
        v
    }
}

tuple: ast::Expression = {
    LPAREN RPAREN => ast::Expression::Tuple(ast::ExpressionList(vec![])),
    LPAREN <tuple_items> RPAREN => ast::Expression::Tuple(ast::ExpressionList(<>)),
}

tuple_items: Vec<ast::Expression> = {
    postfix_expr => vec![<>],
    <v:tuple_items> Comma <e:postfix_expr> => {
        let mut v = v;
        v.push(e);
        v
    }
}

